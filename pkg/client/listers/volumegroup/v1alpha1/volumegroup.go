/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/deepakkinni/volumegroup-controller/pkg/apis/volumegroup/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeGroupLister helps list VolumeGroups.
// All objects returned here must be treated as read-only.
type VolumeGroupLister interface {
	// List lists all VolumeGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeGroup, err error)
	// VolumeGroups returns an object that can list and get VolumeGroups.
	VolumeGroups(namespace string) VolumeGroupNamespaceLister
	VolumeGroupListerExpansion
}

// volumeGroupLister implements the VolumeGroupLister interface.
type volumeGroupLister struct {
	indexer cache.Indexer
}

// NewVolumeGroupLister returns a new VolumeGroupLister.
func NewVolumeGroupLister(indexer cache.Indexer) VolumeGroupLister {
	return &volumeGroupLister{indexer: indexer}
}

// List lists all VolumeGroups in the indexer.
func (s *volumeGroupLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeGroup))
	})
	return ret, err
}

// VolumeGroups returns an object that can list and get VolumeGroups.
func (s *volumeGroupLister) VolumeGroups(namespace string) VolumeGroupNamespaceLister {
	return volumeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeGroupNamespaceLister helps list and get VolumeGroups.
// All objects returned here must be treated as read-only.
type VolumeGroupNamespaceLister interface {
	// List lists all VolumeGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeGroup, err error)
	// Get retrieves the VolumeGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VolumeGroup, error)
	VolumeGroupNamespaceListerExpansion
}

// volumeGroupNamespaceLister implements the VolumeGroupNamespaceLister
// interface.
type volumeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeGroups in the indexer for a given namespace.
func (s volumeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeGroup))
	})
	return ret, err
}

// Get retrieves the VolumeGroup from the indexer for a given namespace and name.
func (s volumeGroupNamespaceLister) Get(name string) (*v1alpha1.VolumeGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("volumegroup"), name)
	}
	return obj.(*v1alpha1.VolumeGroup), nil
}
